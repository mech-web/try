(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./editor.js":
/*!*******************!*\
  !*** ./editor.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mech_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mech-wasm */ \"./node_modules/mech-wasm/mech_wasm.js\");\n\r\n\r\n// ## Websocket \r\n\r\n/*\r\nlet host = location.hostname == \"\" ? \"localhost\" : location.hostname;\r\nlet ws = new WebSocket(`ws://${host}:3012`);\r\n\r\nws.addEventListener(\"open\", () => opened());\r\nws.addEventListener(\"close\", (event) => closed(event.code, event.reason));\r\nws.addEventListener(\"message\", (event) => messaged(event.data));\r\n\r\nfunction opened() {\r\n  console.log(ws);\r\n  // Get code\r\n  ws.send(\"{\\\"Table\\\":3436366081}\");\r\n}\r\n\r\nfunction closed(code, reason) {\r\n  console.log(code, reason);\r\n}\r\n\r\nfunction messaged(data) {\r\n  var obj = JSON.parse(data);\r\n  let code = obj[0][0].String;\r\n  let code_editor = document.getElementById(\"code\");\r\n  code_editor.innerHTML = code;\r\n\r\n  // Compile the code\r\n  mech_core.compile_code(code);\r\n  mech_core.add_application();\r\n\r\n  // Start the timer if there is one\r\n  let column = mech_core.get_column(\"system/timer\", 1);\r\n  interval = setInterval(system_timer, column[0]);\r\n}*/\r\n\r\nlet mech_core = mech_wasm__WEBPACK_IMPORTED_MODULE_0__[\"Core\"].new();\r\n\r\nlet time = 1;\r\n\r\n// ## Controls\r\n\r\nlet controls = document.createElement(\"div\");\r\ncontrols.setAttribute(\"class\", \"controls\");\r\n\r\nlet compile = document.createElement(\"button\");\r\ncompile.setAttribute(\"id\", \"compile\");\r\ncompile.innerHTML =  \"Compile\";\r\ncontrols.appendChild(compile);\r\n\r\nlet view_core = document.createElement(\"button\");\r\nview_core.setAttribute(\"id\", \"view core\");\r\nview_core.innerHTML =  \"View Core\";\r\ncontrols.appendChild(view_core);\r\n\r\nlet view_runtime = document.createElement(\"button\");\r\nview_runtime.setAttribute(\"id\", \"view runtime\");\r\nview_runtime.innerHTML =  \"View Runtime\";\r\ncontrols.appendChild(view_runtime);\r\n\r\nlet clear_core = document.createElement(\"button\");\r\nclear_core.setAttribute(\"id\", \"clear core\");\r\nclear_core.innerHTML =  \"Clear Core\";\r\ncontrols.appendChild(clear_core);\r\n\r\nlet txn = document.createElement(\"button\");\r\ntxn.setAttribute(\"id\", \"txn\");\r\ntxn.innerHTML =  \"Add Txn\";\r\n\r\n// ## Time Travel\r\n\r\nfunction resume() {\r\n  let toggle_core = document.getElementById(\"toggle core\");\r\n  let time_slider = document.getElementById(\"time slider\");\r\n  mech_core.resume();\r\n  toggle_core.innerHTML = \"Pause\";\r\n  time_slider.value = time_slider.max;\r\n  render();\r\n}\r\n\r\nfunction pause() {\r\n  let toggle_core = document.getElementById(\"toggle core\");\r\n  mech_core.pause();\r\n  toggle_core.innerHTML = \"Resume\";\r\n  render();\r\n}\r\n\r\nlet time_travel = document.createElement(\"div\");\r\ntime_travel.setAttribute(\"class\", \"time-travel\");\r\n\r\nlet time_slider = document.createElement(\"input\");\r\ntime_slider.setAttribute(\"id\", \"time slider\");\r\ntime_slider.setAttribute(\"class\", \"slider\");\r\ntime_slider.setAttribute(\"min\", \"1\");\r\ntime_slider.setAttribute(\"max\", \"100\");\r\ntime_slider.setAttribute(\"value\", \"100\");\r\ntime_slider.setAttribute(\"type\", \"range\");\r\ntime_travel.appendChild(time_slider);\r\n\r\nlet last_slider_value = 100;\r\ntime_slider.oninput = function() {\r\n  pause();\r\n  let current_value = this.value;\r\n  // Time travel forward\r\n  if (current_value > last_slider_value) {\r\n    mech_core.step_forward_one();\r\n  // Time travel backward\r\n  } else if (current_value < last_slider_value) {\r\n    mech_core.step_back_one();\r\n  }\r\n  last_slider_value = current_value;\r\n  render();\r\n}\r\n\r\nlet step_back = document.createElement(\"button\");\r\nstep_back.setAttribute(\"id\", \"step back\");\r\nstep_back.innerHTML =  \"<\";\r\nstep_back.onclick = function() {\r\n  pause();\r\n  mech_core.step_back_one();\r\n  time_slider.value = time_slider.value - 1;\r\n  render();\r\n}\r\ntime_travel.appendChild(step_back);\r\n\r\nlet toggle_core = document.createElement(\"button\");\r\ntoggle_core.setAttribute(\"id\", \"toggle core\");\r\ntoggle_core.innerHTML =  \"Pause\";\r\ntoggle_core.onclick = function() {\r\n  let toggle_core = document.getElementById(\"toggle core\");\r\n  let state = toggle_core.innerHTML;\r\n  if (state == \"Resume\") {\r\n    resume();\r\n  } else {\r\n    pause();\r\n  }\r\n  render();\r\n};\r\ntime_travel.appendChild(toggle_core);\r\n\r\nlet step_forward = document.createElement(\"button\");\r\nstep_forward.setAttribute(\"id\", \"step forward\");\r\nstep_forward.innerHTML =  \">\";\r\nstep_forward.onclick = function() {\r\n  pause();\r\n  mech_core.step_forward_one();\r\n  time_slider.value = time_slider.value*1 + 1;\r\n  render();\r\n}\r\ntime_travel.appendChild(step_forward);\r\n\r\n// ## Editor\r\n\r\nlet editor = document.createElement(\"div\");\r\neditor.setAttribute(\"class\", \"editor\");\r\n\r\nlet code = document.createElement(\"textarea\");\r\ncode.setAttribute(\"class\", \"code\");\r\ncode.setAttribute(\"id\", \"code\");\r\ncode.setAttribute(\"spellcheck\", \"false\");\r\n\r\nlet drawing_area = document.createElement(\"div\")\r\ndrawing_area.setAttribute(\"id\", \"drawing\");\r\ndrawing_area.setAttribute(\"class\", \"drawing-area\");\r\n\r\neditor.appendChild(drawing_area)\r\n\r\n// ## Editor Container\r\n\r\nlet editor_container = document.createElement(\"div\");\r\neditor_container.setAttribute(\"id\",\"editor container\");\r\neditor_container.setAttribute(\"class\",\"editor-container\");\r\n\r\neditor_container.appendChild(controls);\r\neditor_container.appendChild(editor);\r\neditor_container.appendChild(time_travel);\r\n\r\n// ## Navigation\r\n\r\nlet nav = document.createElement(\"div\");\r\nnav.setAttribute(\"id\",\"navigation\");\r\nnav.setAttribute(\"class\",\"navigation\");\r\n\r\n\r\n// ## Bring it all together\r\n\r\nlet app = document.createElement(\"div\");\r\napp.setAttribute(\"id\",\"app\");\r\napp.setAttribute(\"class\",\"app\");\r\napp.appendChild(nav);\r\napp.appendChild(code);\r\napp.appendChild(editor_container);\r\n\r\ndocument.body.appendChild(app);\r\n\r\n// ## Event handlers\r\nfunction system_timer() {\r\n  var d = new Date();\r\n  mech_core.queue_change(\"system/timer\",1,2,time);\r\n  mech_core.queue_change(\"system/timer\",1,3,d.getHours() % 12);\r\n  mech_core.queue_change(\"system/timer\",1,4,d.getMinutes());\r\n  mech_core.queue_change(\"system/timer\",1,5,d.getSeconds());\r\n  mech_core.process_transaction();\r\n  time = time + 1;\r\n  render();\r\n}\r\n\r\nfunction render() {\r\n  mech_core.render();\r\n}\r\n\r\nvar interval;\r\ndocument.getElementById(\"compile\").addEventListener(\"click\", function(click) {\r\n  mech_core.clear();\r\n  clearInterval(interval);\r\n\r\n  let code = document.getElementById(\"code\");\r\n  mech_core.compile_code(code.value);\r\n  mech_core.add_application();\r\n\r\n  // Start the timer if there is one\r\n  let column = mech_core.get_column(\"system/timer\", 1);\r\n  interval = setInterval(system_timer, column[0]);\r\n});\r\n\r\ndocument.getElementById(\"view core\").addEventListener(\"click\", function() {\r\n  mech_core.display_core();\r\n  mech_core.list_global_tables();\r\n});\r\n\r\ndocument.getElementById(\"view runtime\").addEventListener(\"click\", function() {\r\n  mech_core.display_runtime();\r\n});\r\n\r\ndocument.getElementById(\"clear core\").addEventListener(\"click\", function() {\r\n  mech_core.clear();\r\n  clearInterval(interval);\r\n  //render();\r\n});\r\n\r\nlet program = `# Bricks\r\n\r\n## The Game\r\n\r\ngame setup\r\n  #system/timer = [resolution: 15 tick: 0 hours: 0 minutes: 0 seconds: 0]\r\n  #app/main = [root: \"drawing\" direction: _ contains: [#game]]\r\n\r\ngame area\r\n  #game = [|type     class contains    parameters|\r\n            #paddle-control\r\n            \"canvas\" _     [#elements] [width: 400 height: 400]]\r\n\r\ncontroller slider\r\n  #paddle-control = [type: \"slider\" class: _ contains: _ parameters:  [min: 0 max: 300 value: 40]]\r\n\r\ndraw the game area\r\n  pos = #paddle-control{1,4}{1,3}\r\n  start = pos\r\n  end = pos + 100\r\n  #elements = [|shape    parameters|\r\n                \"circle\" [cx: #ball.x cy: #ball.y radius: 10 fill: \"#000000\"]\r\n                \"line\"   [x1: start y1: 350 x2: end y2: 350 stroke: \"#000000\"]]\r\n\r\n## The Ball\r\n\r\nblock\r\n  #ball = [x: 20 y: 20 vx: 1 vy: 3]\r\n\r\nupdate ball position\r\n  ~ #system/timer.tick\r\n  #ball.x := #ball.x + #ball.vx\r\n  #ball.y := #ball.y + #ball.vy\r\n\r\nbounce the ball off the paddle\r\n  ~ #ball.y\r\n  pos = #paddle-control{1,4}{1,3}\r\n  start = pos\r\n  end = pos + 100\r\n  ix = #ball.y > 340\r\n  ix1 = #ball.x > start\r\n  ix2 = #ball.x < end\r\n  ix3 = #ball.y < 342\r\n  first = ix & ix1\r\n  second = first & ix2\r\n  third = second & ix3\r\n  #ball.vy{third} := -#ball.vy\r\n\r\nbounce the ball off the ceiling\r\n  ~ #ball.y\r\n  ceiling = #ball.y < 10\r\n  #ball.vy{ceiling} := -#ball.vy\r\n\r\nbounce the ball off the walls\r\n  ~ #ball.x\r\n  ix = #ball.x > 390\r\n  ix2 = #ball.x < 10\r\n  #ball.vx{ix | ix2} := -#ball.vx\r\n\r\nreset the ball if it makes it past the paddle\r\n  ~ #ball.y\r\n  ix = #ball.y > 390\r\n  #ball.x{ix} := 20\r\n  #ball.y{ix} := 20`;\r\n\r\n  code.innerHTML = program;\r\n  mech_core.compile_code(code.value);\r\n  mech_core.add_application();\r\n\r\n  // Start the timer if there is one\r\n  let column = mech_core.get_column(\"system/timer\", 1);\r\n  interval = setInterval(system_timer, column[0]);\n\n//# sourceURL=webpack:///./editor.js?");

/***/ })

}]);